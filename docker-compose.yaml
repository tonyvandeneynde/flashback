services:
  postgres:
    image: postgres:latest
    container_name: postgres
    env_file:
      - ./.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    deploy:
      replicas: ${ENABLE_POSTGRES:-1} # Default is 1 replica (enabled). Set to 0 for using a managed Postgres service.

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    env_file:
      - ./rabbitmq-service/.env
    networks:
      - app-network

  storage-service:
    build:
      context: ./storage-service
    container_name: storage-service
    env_file:
      - ./storage-service/.env
    environment:
      PORT: 3500
      RABBITMQ_URL: amqp://rabbitmq:5672
    depends_on:
      - rabbitmq
    networks:
      - app-network
    restart: always

  api:
    build:
      context: ./flashback-api
    container_name: flashback-api
    env_file:
      - ./flashback-api/.env
    environment:
      RABBITMQ_URL: amqp://rabbitmq:5672
      STORAGE_SERVICE_URL: http://storage-service:3500
      FRONT_END_URL: http://front-end:80
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - app-network
    restart: always

  front-end:
    build:
      context: ./flashback-front-end
    container_name: front-end
    env_file:
      - ./flashback-front-end/.env
    depends_on:
      - api
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro # Mount certificates from host
      - /var/www/certbot:/var/www/certbot:ro # Mount webroot for Certbot challenges
    depends_on:
      - front-end
      - api
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
