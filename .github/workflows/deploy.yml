name: Deploy to DigitalOcean droplet with HTTPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up SSH to connect to the Droplet
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    # Step 3: Add Droplet to known_hosts
    - name: Add Droplet to known_hosts
      run: |
        ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

    # Step 5: Ensure the target directory exists
    - name: Create target directory
      run: |
        ssh root@${{ secrets.DROPLET_IP }} "mkdir -p /home/root/app"

    # Step 6.1: Copy files to the Droplet
    - name: Copy files to server
      run: |
        scp -r ./* root@${{ secrets.DROPLET_IP }}:/home/root/app

    # Step 6.2: Create .env files on server
    - name: Create .env files on server
      run: |
        ssh root@${{ secrets.DROPLET_IP }} "printf '%s\n' \"${{ secrets.FRONTEND_ENV }}\" > /home/root/app/flashback-front-end/.env"
        ssh root@${{ secrets.DROPLET_IP }} "printf '%s\n' \"${{ secrets.API_ENV }}\" > /home/root/app/flashback-api/.env"
        ssh root@${{ secrets.DROPLET_IP }} "printf '%s\n' \"${{ secrets.STORAGE_ENV }}\" > /home/root/app/storage-service/.env"
        ssh root@${{ secrets.DROPLET_IP }} "printf '%s\n' \"${{ secrets.RABBITMQ_ENV }}\" > /home/root/app/rabbitmq-service/.env"
        ssh root@${{ secrets.DROPLET_IP }} "printf '%s\n' \"${{ secrets.POSTGRES_ENV }}\" > /home/root/app/.env"

    # Step 7: SSH into the Droplet and deploy
    - name: Deploy on server
      run: |
        ssh root@${{ secrets.DROPLET_IP }} "cd /home/root/app && export ENABLE_POSTGRES=0 && docker compose down && docker compose up -d --build"

    # Step 8: Install Certbot and Obtain SSL Certificate
    - name: Set up HTTPS with Certbot
      run: |
        ssh root@${{ secrets.DROPLET_IP }} "
          sudo apt update &&
          sudo apt install -y certbot &&
          # Ensure the webroot directory exists
          sudo mkdir -p /var/www/certbot &&
          sudo chown -R www-data:www-data /var/www/certbot &&
          # Use webroot plugin for Certbot
          sudo certbot certonly --webroot -w /var/www/certbot -d flashback-cloud.be -d www.flashback-cloud.be --non-interactive --agree-tos -m tonyvandeneynde@gmail.com
        "

    # Step 9: Test HTTPS Renewal
    - name: Test Certbot Auto-Renewal
      run: |
        ssh root@${{ secrets.DROPLET_IP }} "sudo certbot renew --dry-run"